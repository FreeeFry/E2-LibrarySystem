@persist [CARLIB_SteerBase__]:entity
@persist [CARLIB_SteerSlaves__, CARLIB_SteerRatios__, CARLIB_SteerSpeeds__, CARLIB_SteerParent__]:array
@persist [CARLIB_SteerMax__, CARLIB_SteerAccum__, CARLIB_SpeedDampingFactor__]:number
@persist [CARLIB_SteerAxis__]:angle

# Required libraries
#include "libraries/car/car_core"

# Functions
function carlib_InitSteering(InitTable:table)
{
	# Defaults
	CARLIB_SteerMax__ = 45
	CARLIB_SteerRatios__ = array(1)
	CARLIB_SteerSpeeds__ = array(0.1, 0.2)
	CARLIB_SteerAxis__ = ang(0, 1, 0)
	CARLIB_SpeedDampingFactor__ = 1
	
	if(InitTable:exists("base")) { CARLIB_SteerBase__ = InitTable["base", entity] }
	if(InitTable:exists("slaves"))
	{
		CARLIB_SteerSlaves__ = InitTable["slaves", array]
		for(I=1, CARLIB_SteerSlaves__:count())
		{
			CARLIB_SteerRatios__[I, number] = 1 # Default
		}
	}
	if(InitTable:exists("ratios")) { CARLIB_SteerRatios__ =  InitTable["ratios", array] }
	if(InitTable:exists("max")) { CARLIB_SteerMax__ = InitTable["max", number] }
	if(InitTable:exists("speed")) { CARLIB_SteerSpeeds__ =  InitTable["speed", array] }
	if(InitTable:exists("axis")) { CARLIB_SteerAxis__ = InitTable["axis", angle] }
	if(InitTable:exists("parent")) { CARLIB_SteerParent__ = InitTable["parent", array] }
	if(InitTable:exists("damping")) { CARLIB_SpeedDampingFactor__ = InitTable["damping", number] }
}

# Events
function event_steerUpdate(Callbacks:array) # This doesn't call any callbacks, so don't register any to it.
{
	local Left = CARLIB_InputData__[CARLIB_KeyMapping__["left", string], number]
	local Right = CARLIB_InputData__[CARLIB_KeyMapping__["right", string], number]
	local VelFactor = clamp(CARLIB_SpeedDampingFactor__ - (toUnit("km/h", CARLIB_SteerBase__:vel():length())/180), 0.1, 1)
	if(Left || Right) { CARLIB_SteerAccum__ += ((Left ? CARLIB_SteerMax__*VelFactor : -CARLIB_SteerMax__*VelFactor)-CARLIB_SteerAccum__)*CARLIB_SteerSpeeds__[1, number] } else { CARLIB_SteerAccum__ -= CARLIB_SteerAccum__*CARLIB_SteerSpeeds__[2, number] }
	
	local Frozen = CARLIB_SteerBase__:isFrozen()
	for(I=1, CARLIB_SteerSlaves__:count())
	{
		local Ent = CARLIB_SteerSlaves__[I, entity]
		local Ratio = CARLIB_SteerRatios__[I, number]
		Ent:setAng(CARLIB_SteerBase__:toWorld(CARLIB_SteerAccum__*CARLIB_SteerRatios__[I, number]*CARLIB_SteerAxis__))
		Ent:propFreeze(1)
		if(!Frozen & CARLIB_SteerParent__[1, entity]:isValid()) { Ent:setPos(CARLIB_SteerParent__[1, entity]:toWorld(CARLIB_SteerParent__[2, vector]))}
	}
}