@persist [EventsTable__]:table

#[ Uncomment to enable debugging.
@outputs [EventsTable__]:table
#]#

# Core functions
function registerEvent(EventName:string, PollInterval:number)
{
	if(!EventsTable__:exists(EventName))
	{
		EventsTable__[EventName, table] = table("pollInterval" = PollInterval)
		timer(EventName, PollInterval)
	}
}
function registerManualEvent(EventName:string)
{
	if(!EventsTable__:exists(EventName))
	{
		EventsTable__[EventName, table] = table()
	}
}
function unregisterEvent(EventName:string)
{
	if(EventsTable__:exists(EventName))
	{
		EventsTable__:remove(EventName)
		stoptimer(EventName)
	}
}
function registerCallback(EventName:string, CallbackName:string)
{
	if(EventsTable__:exists(EventName))
	{
		local Found = 0
		for(I=1, EventsTable__[EventName, table]:count())
		{
			if(EventsTable__[EventName, table][I, string] == CallbackName)
			{
				print("[ERROR]: Found duplicate callback on registry call, not adding.")
				Found = 1
				break
			}
		}
		if(!Found)
		{
			Event = EventsTable__[EventName, table]
			Event:pushString(CallbackName)
		}
	}
}
function unregisterCallback(EventName:string, CallbackName:string)
{
	if(EventsTable__:exists(EventName))
	{
		Callbacks = EventsTable__[EventName, table]
		for(I=Callbacks:count(), 1, -1)
		{
			if(Callbacks[I, string] == CallbackName)
			{
				Callbacks:remove(I)
			}
		}
	}
}

# Misc functions:
function number eventIsRegistered(EventName:string)
{
	if(EventsTable__:exists(EventName)) { return 1 }
	return(0)
}
function eventSetInterval(EventName:string, NewInterval:number)
{
	if(EventsTable__:exists(EventName))
	{
		EventsTable__[EventName, table]["pollInterval", number] = NewInterval
	}
}
function number eventGetInterval(EventName:string)
{
	if(!EventsTable__:exists(EventName)) { return -1 }
	return EventsTable__["pollInterval", number]
}
function eventManualTrigger(EventName:string, DelayTime:number)
{
	if(EventsTable__:exists(EventName))
	{
		timer(EventName, DelayTime)
	}
}
function eventManualTriggerWithCallbacks(EventName:string, CallbacksArray:array)
{
	if(EventsTable__:exists(EventName))
	{
		EventName(CallbacksArray)
	}
}

# Misc functions
function registerEvent(EventName:string, PollInterval:number, Callback:string)
{
	if(!EventsTable__:exists(EventName))
	{
		EventsTable__[EventName, table] = table("pollInterval" = PollInterval)
		timer(EventName, PollInterval)
		registerCallback(EventName, Callback)
	}
}