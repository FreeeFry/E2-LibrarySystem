@persist [EventsTable__]:table

#[ Uncomment to enable debugging.
@outputs [EventsTable__]:table
#]#

# Core functions
#
function string eventGetTestFunc(EventName:string)
{
    if(EventsTable__:exists(EventName)) { return EventsTable__[EventName, table]["testFunc__", string] }
    return ""
}
# Internal event, handles undefined events with just a test function - don't register a callback directly to this. ;)
function event_Generic__(EventName:string, Callbacks:array)
{
    local EventData = eventGetTestFunc(EventName)()[table]
    if(EventData["hit", number])
    {
        for(I=1, Callbacks:count())
        {
            Callbacks[1, string](EventData)
        }
    }
}

# Add a callback to an event
function registerCallback(EventName:string, CallbackName:string)
{
	if(EventsTable__:exists(EventName))
	{
		if(!invert(EventsTable__[EventName, table]):exists(CallbackName))
		{
			Event = EventsTable__[EventName, table]
			Event:pushString(CallbackName)
		}
	}
}
# Register an actual event
function registerEvent(EventName:string, PollInterval:number)
{
	if(!EventsTable__:exists(EventName))
	{
		EventsTable__[EventName, table] = table("pollInterval" = PollInterval)
		timer(EventName, PollInterval)
	}
}
# Shortcut to registering an event and adding a callback
function registerEvent(EventName:string, PollInterval:number, Callback:string)
{
	registerEvent(EventName, PollInterval)
	registerCallback(EventName, Callback)
}
function registerEventTest(EventName:string, PollInterval:number, EventTestFunc:string)
{
    if(!EventsTable__:exists(EventTestFunc))
    {
        EventsTable__[EventName, table] = table("pollInterval" = PollInterval, "testFunc__" = EventTestFunc)
    		  timer(EventName, PollInterval)
    }
}
function registerEventTest(EventName:string, PollInterval:number, EventTestFunc:string, Callback:string)
{
    registerEventTest(EventName, PollInterval, EventTestFunc)
    registerCallback(EventName, Callback)
}
function registerManualEvent(EventName:string)
{
	if(!EventsTable__:exists(EventName))
	{
		EventsTable__[EventName, table] = table()
	}
}
function unregisterEvent(EventName:string)
{
	if(EventsTable__:exists(EventName))
	{
		EventsTable__:remove(EventName)
		stoptimer(EventName)
	}
}
function unregisterCallback(EventName:string, CallbackName:string)
{
	if(EventsTable__:exists(EventName))
	{
		Callbacks = EventsTable__[EventName, table]
		for(I=Callbacks:count(), 1, -1)
		{
			if(Callbacks[I, string] == CallbackName)
			{
				Callbacks:remove(I)
			}
		}
	}
}

# Misc functions:
function number eventIsRegistered(EventName:string)
{
	return(EventsTable__:exists(EventName))
}
# Returns a COPY of the specified event's table - note this is an expensive function and shouldn't be called often!
function table eventGetCallbacks(EventName:string)
{
	if(!eventIsRegistered(EventName)) { return table() }
	return(EventsTable__[EventName, table]:clone())
}
function eventSetInterval(EventName:string, NewInterval:number)
{
	if(EventsTable__:exists(EventName))
	{
		EventsTable__[EventName, table]["pollInterval", number] = NewInterval
	}
}
function number eventGetInterval(EventName:string)
{
	if(!EventsTable__:exists(EventName)) { return -1 }
	return EventsTable__["pollInterval", number]
}
function eventManualTrigger(EventName:string, DelayTime:number)
{
	if(EventsTable__:exists(EventName))
	{
		timer(EventName, DelayTime)
	}
}
function eventManualTriggerWithCallbacks(EventName:string, CallbacksArray:array)
{
	if(EventsTable__:exists(EventName))
	{
		EventName(CallbacksArray)
	}
}

# Misc functions

# Polling function, it's required you call this outside your if(first()) code section to make the event system work
function eventPoll()
{
	if(EventsTable__:exists(clkName())) {
		local StrEvent__ = clkName()
		StrEvent__(EventsTable__[StrEvent__, table]:toArray()) # Passes registered callbacks to event

		if(EventsTable__[StrEvent__, table]:exists("pollInterval")) { timer(StrEvent__, EventsTable__[StrEvent__, table]["pollInterval", number]) }
	}
	if(chatClk() & eventIsRegistered("event_playerChat")) { # runOnChat support
		eventManualTrigger("event_playerChat", 0)
	}
	if(fileClk() & eventIsRegistered("event_fileUploaded")) {
		eventManualTrigger("event_fileUploaded", 0)
	}
	if(keyClk() & eventIsRegistered("event_playerInput")) { # runOnKeys support, this will cause a critical error if runOnKeys is manually set without including the input library..
		eventManualTriggerWithCallbacks("event_playerInput", EventsTable__["event_playerInput", table]:toArray())
	}
	if(egpQueueClk() & eventIsRegistered("event_egpQueueUpdate")) # This seems to be able to randomly break.....
	{
		eventManualTriggerWithCallbacks("event_egpQueueUpdate", EventsTable__["event_egpQueueUpdate", table]:toArray())
	}
}
