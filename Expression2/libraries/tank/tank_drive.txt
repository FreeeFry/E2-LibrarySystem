@persist [Engines__]:array
@persist [LGearbox__, RGearbox__, CVTGearbox__]:entity
@persist [MaxClutch__, BrakeForce__, MaxThrottle__, IdleThrottle__]:number

#[ Uncomment to enable debugging.
@outputs [Engines__]:array
@outputs [LGearbox__, RGearbox__, CVTGearbox__]:entity
@outputs [MinClutch__, MaxClutch__, BrakeForce__, MaxThrottle__, IdleThrottle__]:number
#]#

# This is required.
#include "libraries/tank/tank_core"

# This is a callback that makes sure the mobility side has up to date player input
function tank_driverInput__(Player:entity, Key:string, State:number)
{
	InputData__[Key, number] = State
}
function event_mobilityUpdate(Callbacks:array)
{
	InputData__["speed", number] = Base__:vel():length() # Store this here, used outside this function for detecting if the tank is moving.
	local Keymap = InputData__["keymap", table]
	local Forward = InputData__[Keymap["forward", string], number]
	local Left = InputData__[Keymap["left", string], number]
	local Reverse = InputData__[Keymap["reverse", string], number]
	local Right = InputData__[Keymap["right", string], number]
	local SteerMode = InputData__[Keymap["steerswitch", string], number]

	local LGearbox = LGearbox__
	local RGearbox = RGearbox__

	LGearbox:acfClutchLeft(MinClutch__)
	LGearbox:acfClutchRight(MinClutch__)
	RGearbox:acfClutchLeft(MinClutch__)
	RGearbox:acfClutchRight(MinClutch__)

	local LGear = (Forward & !Left & !Right ? 1 : (Reverse & !Left & !Right ? 2 : (Right ? 1 : (Left ? 2 : 0))))
	local RGear = (Forward & !Left & !Right ? 1 : (Reverse & !Left & !Right ? 2 : (Right ? 2 : (Left ? 1 : 0))))

	Throttle = (Forward | Reverse ? MaxThrottle__ : (Left | Right ? MaxThrottle__ :  IdleThrottle__))
	for(I=1, Engines__:count())
	{
		Engines__[I, entity]:acfThrottle(Throttle)
	}

	LGearbox:acfShift(LGear)
	RGearbox:acfShift(RGear)

	LGearbox:acfClutchLeft((Left | Right ? MaxClutch__ : MinClutch__))
	RGearbox:acfClutchRight((Left | Right ? MaxClutch__ : MinClutch__))

	LGearbox:acfBrake(0)
	RGearbox:acfBrake(0)

	if(Left | Right)
	{
		if(!SteerMode)
		{
			if(Reverse)
			{
				LGearbox:acfClutchRight((Right ? MaxClutch__ : MinClutch__))
				LGearbox:acfBrakeRight((Right ? BrakeForce__*3 : 0))
				RGearbox:acfClutchLeft((Left ? MaxClutch__ : MinClutch__))
				RGearbox:acfBrakeLeft((Left ? BrakeForce__*3 : 0))
			} else {
				LGearbox:acfClutchRight((Left ? MaxClutch__ : MinClutch__))
				LGearbox:acfBrakeRight((Left ? BrakeForce__*3 : 0))
				RGearbox:acfClutchLeft((Right ? MaxClutch__ : MinClutch__))
				RGearbox:acfBrakeLeft((Right ? BrakeForce__*3 : 0))
			}
		}
	} elseif(!Forward & !Reverse) {
		LGearbox:acfBrake(BrakeForce__*1.5)
		RGearbox:acfBrake(BrakeForce__*1.5)
	}
}
function event_tankMove(Callbacks:array)
{
	if(InputData__["speed", number] > 0)
	{
		for(I=1, Callbacks:count())
		{
			local StrCallback = Callbacks[I, string]
			StrCallback(InputData__["speed", number], Base__:angVel())
		}
	}
}

# Getters and setters
function tanklib_setIdleThrottle(IdleThrottle:number)
{
	IdleThrottle__ = IdleThrottle
}
function tanklib_setMaxThrottle(MaxThrottle:number)
{
	MaxThrottle__ = MaxThrottle
}
function tanklib_setMinClutch(MinClutch:number)
{
	MinClutch__ = MinClutch
}
function tanklib_setMaxClutch(MaxClutch:number)
{
	MaxClutch__ = MaxClutch
}
function tanklib_setEngineActive(ActiveState:number)
{
	for(I=1, Engines__:count())
	{
		Engines__[I, entity]:acfActive(ActiveState)
	}
}
function tanklib_setInputSource(Player:entity)
{
	inputRegisterSource("tankdriver", Player)
	registerCallback("event_playerInput", "tank_driverInput__")
}
function tanklib_unsetInputSource()
{
	inputUnregisterSource("tankdriver")
}
