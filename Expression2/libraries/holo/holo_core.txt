@persist [HOLOLIB_HolosNotSpawned__, HOLOLIB_HoloIdentifiers__, HOLOLIB_SaveData__, HOLOLIB_AnimationQueue__]:table
@persist [HOLOLIB_AnimationStep__, HOLOLIB_LoadFileIndexOffset]:number
@persist [HOLOLIB_LoadToTableCallback__, HOLOLIB_SaveFilterCustom__]:string
@persist [HOLOLIB_CodeGeneratorData__]:table

# Required.
#include "libraries/event_system/event_core"
#include "libraries/file/file_core"

# Internal Variables:
HOLOLIB_AnimationStep__ = 1

# Internal functions
function holoSpawnerLoadedFile__(Filename:string, State:number) # Internal callback, don't use.
{
	local SaveData = vonDecodeTable(fileRead())
	if(!SaveData:exists("holospawnertag__")) { hint(Filename + " was not a valid holoSpawner save file!", 10), return }
	SaveData:remove("holospawnertag__")
	
	#print("Shit happenin yo:", SaveData:count())
	for(I=1, SaveData:count())
	{
		local EntTable = SaveData[I, table]
		EntTable["parent", entity] = HOLOLIB_SaveData__["parent", entity]
		EntTable["posl", table][2, entity] = HOLOLIB_SaveData__["parent", entity]
		EntTable["anglel", table][2, entity] = HOLOLIB_SaveData__["parent", entity]
		if(HOLOLIB_LoadFileIndexOffset > 0)
		{
			EntTable["id", number] = HOLOLIB_LoadFileIndexOffset+EntTable["id", number]
		}
		HOLOLIB_HolosNotSpawned__:pushTable(EntTable)
	}
	hint("Loaded file: " + Filename + " successfully!", 5)
	unregisterCallback("event_fileUploaded", "holoSpawnerLoadedFile__")
}
function table holoSpawnerGetEntTable(Base:entity, Ent:entity, ID:number) # Internal function, don't use unless you really have need of it.
{
	return(table(
		"id" = ID,
		"color" = Ent:getColor(),
		"alpha" = Ent:getAlpha(),
		"anglel" = table(Base:toLocal(Ent:angles()), Base),
		"posl" = table(Base:toLocal(Ent:pos()), Base),
		"model" = Ent:model(),
		"material" = Ent:getMaterial()
	))
}

# Events
function event_codegeneratorGatherData(Callbacks:array)
{
	#HOLOLIB_CodeGeneratorData__
	if(!HOLOLIB_CodeGeneratorData__:exists("generated")) { HOLOLIB_CodeGeneratorData__["generated", string] = "" }
	#print(format("Remaining to gather: %i", HOLOLIB_CodeGeneratorData__["ents", array]:count()))
	local Ent = HOLOLIB_CodeGeneratorData__["ents", array]:popEntity()
	
	local ID = HOLOLIB_CodeGeneratorData__["index", number]
	local EntData = holoSpawnerGetEntTable(HOLOLIB_CodeGeneratorData__["reference", entity], Ent, HOLOLIB_CodeGeneratorData__["index", number])
	local NL = format("\n")
	local Accuracy = 3 # Number of decimal points to round angles and vectors down to.
	local LocalPos = EntData["posl", table][1, vector]
	local LocalAng = EntData["anglel", table][1, angle]
	local CodeStr = "holoSpawnerAdd(" + ID + ",table(" + NL +
		"\"color\" = vec(" + EntData["color", vector]:x() + "," + EntData["color", vector]:y() + "," + EntData["color", vector]:z() + ")," + NL +
		"\"alpha\" = " + EntData["alpha", number] + "," + NL +
		"\"model\" = \"" + EntData["model", string] + "\"," + NL +
		"\"material\" = \"" + EntData["material", string] + "\"," + NL +
		"\"posl\" = table(vec(" + round(LocalPos:x(),Accuracy) + "," + round(LocalPos:y(),Accuracy) + "," + round(LocalPos:z(),Accuracy) +"), GeneratorReference)," + NL +
		"\"anglel\" = table(ang(" + round(LocalAng:pitch(),Accuracy) + "," + round(LocalAng:yaw(),Accuracy) + "," + round(LocalAng:roll(),Accuracy) +"), GeneratorReference))" + NL + ")" + NL + NL
	HOLOLIB_CodeGeneratorData__["generated", string] = HOLOLIB_CodeGeneratorData__["generated", string] + CodeStr
	
	HOLOLIB_CodeGeneratorData__["index", number] = HOLOLIB_CodeGeneratorData__["index", number] + 1
	if(!HOLOLIB_CodeGeneratorData__["ents", array]:count())
	{
		fileWrite(HOLOLIB_CodeGeneratorData__["savefile", string], HOLOLIB_CodeGeneratorData__["generated", string])
		print(format("Wrote %i bytes to %s", HOLOLIB_CodeGeneratorData__["generated", string]:length(), HOLOLIB_CodeGeneratorData__["savefile", string]))
		unregisterEvent("event_codegeneratorGatherData")
	}
}

# Internal event, don't register it, only register callbacks to it!
# Any callback registered to this event can return 1 to skip spawning of the hologram
function number event_holoPreSpawn(ID, HoloData:table)
{
	local Callbacks = eventGetCallbacks("event_holoPreSpawn")
	for(I=1, Callbacks:count())
	{
		if(Callbacks[I, string](ID, HoloData)[number]) { return 1 }
	}
	return 0
}, registerManualEvent("event_holoPreSpawn")

function event_holoSpawn(Callbacks:array)
{
	#print(HOLOLIB_HolosNotSpawned__[1, table]["id", number])
	if(!HOLOLIB_HolosNotSpawned__:count()) { return }
	if(!holoCanCreate()) { return }
	
	local HoloData = HOLOLIB_HolosNotSpawned__[1, table]
	local ID = HoloData["id", number]
	
	local HoloEnt = noentity()
	local Keys = array()
	local Skip = 0
	if(eventIsRegistered("event_holoPreSpawn"))
	{
		if(event_holoPreSpawn(ID, HoloData)) { Skip = 1 }
	}
	if(!Skip)
	{
		HoloEnt = holoCreate(ID)
		Keys = HoloData:keys()
		for(I=1, Keys:count())
		{
			switch(Keys[I, string])
			{
				case "pos",
					holoPos(ID, HoloData["pos", vector])
					break
				case "posl",
					if(HoloData["posl", table][2, entity]:isValid())
					{
						holoPos(ID, HoloData["posl", table][2, entity]:toWorld(HoloData["posl", table][1, vector]))
					}
					break
				case "angle",
					holoAng(ID, HoloData["angle", angle])
					break
				case "anglel",
					if(HoloData["anglel", table][2, entity]:isValid())
					{
						holoAng(ID, HoloData["anglel", table][2, entity]:toWorld(HoloData["anglel", table][1, angle]))
					}
					break
				case "ang",
					holoAng(ID, HoloData["ang", angle])
					break
				case "angl",
					if(HoloData["angl", table][2, entity]:isValid())
					{
						holoAng(ID, HoloData["angl", table][2, entity]:toWorld(HoloData["angl", table][1, angle]))
					}
					break
				case "scale",
					holoScale(ID, HoloData["scale", vector])
					break
				case "scaleu",
					holoScaleUnits(ID, HoloData["scaleu", vector])
					break
				case "color",
					holoColor(ID, HoloData["color", vector])
					break
				case "material",
					holoMaterial(ID, HoloData["material", string])
					break
				case "alpha",
					holoAlpha(ID, HoloData["alpha", number])
					break
				case "disableshading",
					holoDisableShading(ID, HoloData["disableshading", number])
				case "model",
					holoModel(ID, HoloData["model", string])
					break
				case "modelg",
					local ModelData__ = HoloData["modelg", table]
					holoModel(ID, ModelData__["model", string])
					holoBodygroup(ID, ModelData__["bodygroup", table]["group", number], ModelData__["bodygroup", table]["sub", number])
					break
				case "parent",
					holoParent(ID, HoloData["parent", entity])
					break
				case "parenti",
					holoParent(ID, HoloData["parenti", number])
					break
			}
		}
	}
	
	HOLOLIB_HolosNotSpawned__:remove(1)
	HOLOLIB_HoloIdentifiers__:remove(ID)
	
	if(!Skip)
	{
		for(I=1, Callbacks:count())
		{
			Callbacks[I, string](ID, HoloEnt, HOLOLIB_HolosNotSpawned__:ncount())
		}
	}
}
function event_holoSpawnerFilter__(Callbacks:array) # Internal event only, don't register callbacks to this.
{
	if(HOLOLIB_SaveData__["index", number] > 0)
	{
		local Ent = HOLOLIB_SaveData__["ents", array][HOLOLIB_SaveData__["index", number], entity]
		if(Ent:parent():isValid() && Ent:parent() == HOLOLIB_SaveData__["parent", entity])
		{
			HOLOLIB_SaveData__["filtered", table]:pushTable(holoSpawnerGetEntTable(HOLOLIB_SaveData__["base", entity], Ent, HOLOLIB_SaveData__["filtered", table]:count()+1))
		}
	} else {
		unregisterEvent("event_holoSpawnerFilter__")
		HOLOLIB_SaveData__["filtered", table]["holospawnertag__", number] = 1
		fileWrite(HOLOLIB_SaveData__["filename", string], vonEncode(HOLOLIB_SaveData__["filtered", table]))
		hint("Saved file: " + HOLOLIB_SaveData__["filename", string], 5)
		HOLOLIB_SaveData__ = table()
	}
	HOLOLIB_SaveData__["index", number] = HOLOLIB_SaveData__["index", number]-1
}
function event_holoSpawnerFilterCustom__(Callbacks:array) # Internal event only, don't register callbacks to this.
{
	if(HOLOLIB_SaveData__["index", number] > 0)
	{
		local Ent = HOLOLIB_SaveData__["ents", array][HOLOLIB_SaveData__["index", number], entity]
		if(HOLOLIB_SaveFilterCustom__(Ent)[number])
		{
			HOLOLIB_SaveData__["filtered", table]:pushTable(holoSpawnerGetEntTable(HOLOLIB_SaveData__["base", entity], Ent, HOLOLIB_SaveData__["filtered", table]:count()+1))
		}
	} else {
		unregisterEvent("event_holoSpawnerFilterCustom__")
		HOLOLIB_SaveData__["filtered", table]["holospawnertag__", number] = 1
		fileWrite(HOLOLIB_SaveData__["filename", string], vonEncode(HOLOLIB_SaveData__["filtered", table]))
		hint("Saved file: " + HOLOLIB_SaveData__["filename", string], 5)
		HOLOLIB_SaveData__ = table()
	}
	HOLOLIB_SaveData__["index", number] = HOLOLIB_SaveData__["index", number]-1
}
function event_holoAnimate(Callbacks:array)
{
	if(HOLOLIB_AnimationQueue__:ncount() < 1) { return }
	
	local Index = HOLOLIB_AnimationQueue__[1, table]["index", number]
	local AnimationData = HOLOLIB_AnimationQueue__[1, table]["data", table]
	local Identifier = AnimationData["id", string]
	
	if(AnimationData["stepsize", table][1, string] == "angle")
	{
		holoAng(Index, holoEntity(Index):toWorld(AnimationData["stepsize", table][2, angle]))
	}elseif(AnimationData["stepsize", table][1, string] == "vector")
	{
		holoPos(Index, holoEntity(Index):toWorld(AnimationData["stepsize", table][2, vector]))
	}elseif(AnimationData["stepsize", table][1, string] == "scale")
	{
		holoScale(Index, holoScale(Index)+AnimationData["stepsize", table][2, vector])
	}
	HOLOLIB_AnimationStep__ += 1
	
	if(HOLOLIB_AnimationStep__ > AnimationData["steps", number])
	{
		HOLOLIB_AnimationQueue__:remove(1)
		HOLOLIB_AnimationStep__ = 1
		for(I=1, Callbacks:count())
		{
			Callbacks[I, string](Index, Identifier)
		}
	}
}

# Functions
function holoSpawnerAdd(Identifier:number, HoloData:table)
{
	if(!HOLOLIB_HoloIdentifiers__:exists(Identifier)) # Hologram already spawned.
	{
		HoloData["id", number] = Identifier
		HOLOLIB_HolosNotSpawned__:pushTable(HoloData)
		HOLOLIB_HoloIdentifiers__[Identifier, number] = HOLOLIB_HolosNotSpawned__:count()
	}
}
function holoSpawnerAddMulti(SpawnTable:table)
{
	for(I=1, SpawnTable:count())
	{
		local EntTable = SpawnTable[I, table]
		if(EntTable:exists("id"))
		{
			HOLOLIB_HolosNotSpawned__:pushTable(EntTable)
		}
	}
}
function number holoSpawnerLoadFromFile(Filename:string, ParentEntity:entity)
{
	if(isSinglePlayer()) { error("Files cannot be loaded in singleplayer :(") }
	if(!fileCanLoad()) { return 0}
	
	HOLOLIB_SaveData__ = table("filename" = Filename, "parent" = ParentEntity)
	registerCallback("event_fileUploaded", "holoSpawnerLoadedFile__")
	filelib_Loadfile(Filename)
	
	return 1
}
function number holoSpawnerLoadFromFile(Filename:string, ParentEntity:entity, StartingIndex:number)
{
	if(isSinglePlayer()) { error("Files cannot be loaded in singleplayer :(") }
	if(!fileCanLoad()) { return 0}
	
	HOLOLIB_SaveData__ = table("filename" = Filename, "parent" = ParentEntity)
	HOLOLIB_LoadFileIndexOffset = StartingIndex
	registerCallback("event_fileUploaded", "holoSpawnerLoadedFile__")
	filelib_Loadfile(Filename)
	
	return 1
}
function number holoSpawnerLoadToTable(Filename:string, Callback:string)
{
	if(isSinglePlayer()) { error("Files cannot be loaded in singleplayer :(") }
	if(!fileCanLoad()) { return 0}
	
	HOLOLIB_LoadToTableCallback__ = Callback
	
	registerCallback("event_fileUploaded", "holoSpawnerLoadedFileToTable__")
	filelib_Loadfile(Filename)
}
function holoSpawnerLoadedFileToTable__(Filename:string, State:number) # Internal callback, don't use.
{
	local SaveData = vonDecodeTable(fileRead())
	if(!SaveData:exists("holospawnertag__")) { hint(Filename + " was not a valid holoSpawner save file!", 10), return }
	SaveData:remove("holospawnertag__")
	
	unregisterCallback("event_fileUploaded", "holoSpawnerLoadedFileToTable__")
	HOLOLIB_LoadToTableCallback__(SaveData)
}

function holoSpawnerPropSave(Filename:string, ParentEnt:entity, BaseEnt:entity)
{
	if(Filename:sub(Filename:length()-3):lower() != ".txt") { hint("Invalid file name(" + Filename + "). File names must end in .txt", 10), return }
	
	findIncludeClass("prop_physics")
	local EntsCount = findInSphere(ParentEnt:pos(), 500)
	HOLOLIB_SaveData__ = table("filename" = Filename, "index" = EntsCount, "ents" = findToArray(), "base" = BaseEnt, "parent" = ParentEnt, "filtered" = table())
	registerEvent("event_holoSpawnerFilter__", 30)
}
function holoSpawnerPropSave(Filename:string, ParentEnt:entity, BaseEnt:entity, FilterFunction:string)
{
	if(Filename:sub(Filename:length()-3):lower() != ".txt") { hint("Invalid file name(" + Filename + "). File names must end in .txt", 10), return }
	
	findIncludeClass("prop_physics")
	local EntsCount = findInSphere(ParentEnt:pos(), 500)
	HOLOLIB_SaveData__ = table("filename" = Filename, "index" = EntsCount, "ents" = findToArray(), "base" = BaseEnt, "parent" = ParentEnt, "filtered" = table())
	HOLOLIB_SaveFilterCustom__ = FilterFunction
	registerEvent("event_holoSpawnerFilterCustom__", 30)
}
function holoSpawnerHoloSave(Filename:string, ParentEnt:entity, HoloTable:table)
{
	local HoloData = table()
	for(I=1, HoloTable:ncount())
	{
		local EntTable = holoSpawnerGetEntTable(ParentEnt, HoloTable[I, entity], I)
		EntTable["scaleu", vector] = holoScaleUnits(holoIndex(HoloTable[I, entity]))
		HoloData:pushTable(EntTable)
	}
	HoloData["holospawnertag__", number] = 1
	fileWrite(Filename, vonEncode(HoloData))
	hint("Saved file: " + Filename, 5)
}
function number holoQueueAnimation(HoloIndex:number, Steps:number, AnimationData:table)
{        
	local AnimationData_ = table()
	local Keys = AnimationData:keys()
	local ValidType = 0
	
	for(I=1, Keys:count())
	{
		if(Keys[I, string] == "angle")
		{
			AnimationData_["stepsize", table] = table(1 = "angle", 2 = AnimationData["angle", angle]/Steps)
			ValidType = 1
		}elseif(Keys[I, string] == "vector")
		{
			AnimationData_["stepsize", table] = table(1 = "vector", 2 = AnimationData["vector", vector]/Steps)
			ValidType = 1
		}elseif(Keys[I, string] == "scale")
		{
			AnimationData_["stepsize", table] = table(1 = "scale", 2 = AnimationData["scale", vector]/Steps)
			ValidType = 1
		}
	}
	if(ValidType)
	{
		AnimationData_["steps", number] = Steps
		if(AnimationData:exists("id")) { AnimationData_["id", string] = AnimationData["id", string] }
		HOLOLIB_AnimationQueue__:pushTable(table(
			"index" = HoloIndex,
			"data" = AnimationData_
		))
		return HOLOLIB_AnimationQueue__:ncount() # Returns number of total animation ( basically think of its ticket number in the queue).
	}
	return -1 # Invalid type
}

function holoSpawnerGenerateSpawnerCode(ReferenceEnt:entity, Ents:array, Savefile:string)
{
	HOLOLIB_CodeGeneratorData__["reference", entity] = ReferenceEnt
	HOLOLIB_CodeGeneratorData__["ents", array] = Ents,
	HOLOLIB_CodeGeneratorData__["savefile", string] = Savefile
	HOLOLIB_CodeGeneratorData__["index", number] = 1
	registerEvent("event_codegeneratorGatherData", 25)
	#print(format("ReferenceEntity: %s\nEntitiesCount: %i\nSaveFile: %s\n", toString(ReferenceEnt), Ents:count(), Savefile))
}

# Getters and Setters
function number holoSpawnerGetRemaining()
{
	return HOLOLIB_HolosNotSpawned__:ncount()
}