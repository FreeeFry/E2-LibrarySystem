@persist [UTIL_ParentEntsFinderData__]:table
@persist [UTIL_ParentedEntsFinderData__]:table
@persist [UTIL_TraceData__]:table

# Required.
#include "libraries/event_system/event_core"

function event_utilParentFinderFilter(Callbacks:array)
{
	if(!UTIL_ParentEntsFinderData__:exists("filtered")) { UTIL_ParentEntsFinderData__["filtered", array] = array() }
	#print(format("Remaining to filter: %i", UTIL_ParentEntsFinderData__["unfiltered", array]:count()))
	local Ent = UTIL_ParentEntsFinderData__["unfiltered", array]:popEntity()
	local Type = Ent:type()
	if(Type != "gmod_wire_hologram" & (UTIL_ParentEntsFinderData__["class", string] == "*" | Type == UTIL_ParentEntsFinderData__["class", string]) & Ent:parent() == UTIL_ParentEntsFinderData__["parent", entity])
	{
		UTIL_ParentEntsFinderData__["filtered", array]:pushEntity(Ent)
	}
	if(!UTIL_ParentEntsFinderData__["unfiltered", array]:count())
	{
		Callbacks[1, string](UTIL_ParentEntsFinderData__["filtered", array], UTIL_ParentEntsFinderData__["parent", entity])
		unregisterEvent("event_utilParentFinderFilter")
	}
}

function findEntsByParent(ReferenceEntity:entity, Class:string, Callback:string)
{
	findInSphere(ReferenceEntity:pos(), 500)
	UTIL_ParentEntsFinderData__["unfiltered", array] = findToArray()
	UTIL_ParentEntsFinderData__["parent", entity] = ReferenceEntity
	UTIL_ParentEntsFinderData__["class", string] = Class
	registerEvent("event_utilParentFinderFilter", 10, Callback)
}

function event_utilParentedFinderFilter(Callbacks:array)
{
	if(!UTIL_ParentedEntsFinderData__:exists("filtered")) { UTIL_ParentedEntsFinderData__["filtered", array] = array() }

	local Ent = UTIL_ParentedEntsFinderData__["unfiltered", array]:popEntity()

	local Type = Ent:type()

	if(UTIL_ParentedEntsFinderData__["class", string] == "*")
	{
		UTIL_ParentedEntsFinderData__["filtered", array]:pushEntity(Ent)
	}elseif(Type == UTIL_ParentedEntsFinderData__["class", string])
	{
		UTIL_ParentedEntsFinderData__["filtered", array]:pushEntity(Ent)
	}
	if(!UTIL_ParentedEntsFinderData__["unfiltered", array]:count())
	{
		Callbacks[1, string](UTIL_ParentedEntsFinderData__["filtered", array])
		unregisterEvent("event_utilParentedFinderFilter")
	}
}
function findParentedEnts(Position:vector, Class:string, Callback:string)
{
	findInSphere(Position, 500)
	UTIL_ParentedEntsFinderData__["unfiltered", array] = findToArray()
	UTIL_ParentedEntsFinderData__["class", string] = Class
	registerEvent("event_utilParentedFinderFilter", 10, Callback)
}, function findParentedEnts(Position:vector, Class:string, Callback:string, Player:entity) { findIncludePlayerProps(Player), findParentedEnts(Position, Class, Callback) }

function ranger traceNormal(Position:vector, Direction:vector, TraceID:string)
{
	local TraceData = UTIL_TraceData__[TraceID, table]

	if(curtime() >= TraceData["nexttrace", number])
	{
		local Ranger = rangerOffset(50000, Position, Direction)
		TraceData["ranger", ranger] = Ranger
		TraceData["nexttrace", number] = curtime() + 0.1
		if(!UTIL_TraceData__:exists(TraceID)) { UTIL_TraceData__[TraceID, table] = TraceData }
	}
	return TraceData["ranger", ranger]
}
